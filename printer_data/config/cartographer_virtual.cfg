## Config for the Cartographer eddy probe

[scanner]
serial: /dev/serial/by-id/usb-Cartographer_614e_1E002D000B43564738333920-if00
#   Path to the serial port for the Cartographer device. Typically has the form
#   /dev/serial/by-id/usb-cartographer_cartographer_...
#   
#   If you are using the CAN Bus version, replace serial: with canbus_uuid: and add the UUID.
#   Example: canbus_uuid: 1283as878a9sd
#
speed: 40
#   Z probing dive speed.
lift_speed: 5.0
#   Z probing lift speed.
backlash_comp: 0.02
#   Backlash compensation distance for removing Z backlash before measuring
#   the sensor response.
x_offset: 0.
#   X offset of cartographer from the nozzle.
y_offset: 21.1
#   Y offset of cartographer from the nozzle.
trigger_distance: 2.0
#   cartographer trigger distance for homing.
trigger_dive_threshold: 1.5
#   Threshold for range vs dive mode probing. Beyond `trigger_distance +
#   trigger_dive_threshold` a dive will be used.
trigger_hysteresis: 0.006
#   Hysteresis on trigger threshold for untriggering, as a percentage of the
#   trigger threshold.
cal_nozzle_z: 0.1
#   Expected nozzle offset after completing manual Z offset calibration.
cal_floor: 0.1
#   Minimum z bound on sensor response measurement.
cal_ceil:5.
#   Maximum z bound on sensor response measurement.
cal_speed: 1.0
#   Speed while measuring response curve.
cal_move_speed: 10.
#   Speed while moving to position for response curve measurement.
default_model_name: default
#   Name of default cartographer model to load.
mesh_main_direction: x
#   Primary travel direction during mesh measurement.
#mesh_overscan: -1
#   Distance to use for direction changes at mesh line ends. Omit this setting
#   and a default will be calculated from line spacing and available travel.
mesh_cluster_size: 1
#   Radius of mesh grid point clusters.
mesh_runs: 2
#   Number of passes to make during mesh scan.

# Cartographer Scanner config
detect_threshold_z: 2100  # This needs tuning
calibration_method: tap 
z_offset: 0.0 
probe_speed: 2.0
tap_location: 175,175 # set to center of bed
sensor: cartographer


[adxl345]
cs_pin: scanner:PA3
spi_bus: spi1

[resonance_tester]
accel_chip: adxl345
probe_points:
    175, 175, 20
    
#[safe_z_home]
#home_xy_position: 150,150
# Example home_xy_position: 175,175 - This would be for a 350 * 350mm bed. 
#z_hop: 10

[gcode_macro Carto_QGL] # safer and faster QGL for Cartographer
gcode:
    G28 # or use a conditional or safe homing
    QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000
    QUAD_GANTRY_LEVEL horizontal_move_z=3
    G28 Z



[gcode_macro RANDOM_CENTER_TAP_POSITION]
gcode: 
  {% set x_min = printer["toolhead"].axis_minimum.x %}
  {% set x_max = printer["toolhead"].axis_maximum.x %}
  {% set y_min = printer["toolhead"].axis_minimum.y %}
  {% set y_max = printer["toolhead"].axis_maximum.y %}
  {% set midpoint_x = (x_min + x_max) / 2 %}
  {% set midpoint_y = (y_min + y_max) / 2 %}
  {% set random_number = (range(-10, 10) | random) %}
  {% set X = (midpoint_x + random_number)|int %}
  {% set Y = (midpoint_y + random_number)|int %}
  G0 X{X} Y{Y}

[gcode_macro _MODULE_SCANNER_PROBE]
# This macro implements the Cartographer auto Z feature
# We do a quick retract first to prevent ooze
gcode:
  M83 ; set to relative
  G1 E-3 F900 ; retract 3mm at 15mm/sec
  M82 ; back to absolute mode
  RANDOM_CENTER_TAP_POSITION
  PROBE_CALIBRATE METHOD=AUTO

# Beacon probe definition also include the probe management macro directly from here
[include macros/base/probing/generic_probe.cfg]